<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: devops | Kevin McCarthy]]></title>
  <link href="http://kevinmccarthy.org//blog/categories/devops/atom.xml" rel="self"/>
  <link href="http://kevinmccarthy.org//"/>
  <updated>2014-08-03T10:56:43-10:00</updated>
  <id>http://kevinmccarthy.org//</id>
  <author>
    <name><![CDATA[Kevin McCarthy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Securing Internal Dashboards with Oauth]]></title>
    <link href="http://kevinmccarthy.org//blog/2014/04/05/securing-internal-dashboards-with-oauth/"/>
    <updated>2014-04-05T17:05:00-10:00</updated>
    <id>http://kevinmccarthy.org//blog/2014/04/05/securing-internal-dashboards-with-oauth</id>
    <content type="html"><![CDATA[<p>At <a href="http://www.github.com/realgeeks/">Real Geeks</a> we have lots of internal dashboards:  <a href="/blog/2013/07/18/10-things-i-learned-deploying-graphite/">Graphite</a>, <a href="http://logstash.net/">Logstash</a>, <a href="http://munin-monitoring.org/">Munin</a>, and some other internal tools with status pages.  Obviously, I didn’t want these open to the public.  I was using one of two different ways of restricting access, and both of them didn’t work very well.</p>

<h1 id="failed-technique-1-require-a-password">Failed Technique #1: Require a password</h1>
<p>The first technique I was using was to set up HTTP Basic Auth passwords for our employees, using a hashed password file sitting on the server.  This was relatively simple to set up, but also a huge pain.  Every time someone forgot their password, I would have to update the server configuration (by SSHing into the server, later by changing the Puppet configuration).  When we add or remove employees it’s a manual process.  Unless you have the server running on HTTPS, their passwords are sent over plain text.</p>

<h1 id="failed-technique-2-restrict-access-with-a-firewall-to-ip-addresses">Failed Technique #2: Restrict access with a firewall to IP addresses</h1>
<p>I also tried by restricting access to these dashboards by requiring a certain IP address in the firewall.  This solves some of the problems with technique #1 but also introduces new ones.  Employees working from home or on their phones couldn’t access the dashboards.  This could probably be solved by having an office VPN but setting that up just for dashboard access is a lot of work.  Also, sometimes our office IP address would change, which again requires a bunch of configuration changes.  Our firewall rules filled up with a bunch of random residential IP addresses so employees could get online from home.</p>

<h1 id="the-solution-oauth">The solution: Oauth</h1>
<p>After feeling the pain for awhile, I knew there had to be a better way.  All of our technical employees have accounts on the <a href="http://www.github.com/realgeeks/">Real Geeks Github Organization</a>.  Github also has an oauth2 provider.  If you’re not familiar with Oauth2, it’s the technique used by those “Log in with Google/Facebook/etc” buttons you see on a lot of websites.  It allows a website to delegate the authentication and account management to another service, in my case, Github.</p>

<p>The next challenge would be to come up with a way to add Oauth2 support to all of my projects.  I didn’t want to have to run forks of Graphite, Logstash, and Munin.  I wanted my solution to be easy to deploy and be lightweight.  I also wanted it to be secure.</p>

<p>After a bit of thinking and searching around, I found <a href="https://github.com/bitly/google_auth_proxy">google_auth_proxy</a>.  It’s an open-source project written in Go that <em>almost</em> solves my problem.  It acts as a guardian that sits in front of your application, requiring the user to authenticate with the Google Oauth2 server before allowing them to continue. Once they have authenticated with Google, it stores a session in an HMAC-signed cookie and allows the requests to proxy through to the backend.</p>

<p>The only problem is, google_oauth_proxy only works with Google oauth servers.  So, I forked it and made a new project <a href="https://github.com/kevin1024/oauth_proxy">oauth_proxy</a>.  oauth_proxy is intended to work with any oauth2 provider, not just google.  Since it’s written in go, it compiles to a static binary that can be easily deployed.</p>

<p><img src="/images/oauth/oauth.gif" title="Looks pretty cool huh" ></p>

<p>Here is an example invocation of the oauth_proxy server:</p>

<p><code>
/oauth_proxy --client-id="f4dddfabbebe5ba" \
--client-secret="ecb0561717bbf29956f" \
--upstream="http://localhost:8080/" \
--cookie-secret="secretsecret" \
--login-url="https://github.com/login/oauth/authorize" \
--redirect-url="http://localhost:4180/oauth2/callback/" \
--redemption-url="https://github.com/login/oauth/access_token \
--oauth-scope=user \
--user-verification-command=/bin/verify_github_team.py"
</code></p>

<p>The client ID and client secret come from the Github oauth control panel.  Upstream points to the upstream server that I’m protecting, it should only be listening on localhost.  The cookie secret is used to sign the session cookie.  The login URL is the token generation endpoint of the oauth provider, and the redirect URL should point to the redirect url on oauth_proxy (it’s always /oauth2/callback, but the hostname changes depending on your server).  Finally, the redemption URL is your oauth2 provider’s token redemption URL where the code from the redirect URL gets posted and exchanged for an access token.  </p>

<h1 id="getting-fancy-with-auth-tokens">Getting fancy with auth tokens</h1>

<p>Sometimes, getting an auth token from the oauth2 provider is not sufficient to gain access to your backend. For example, maybe you want to make sure that the person authenticating belongs to a specific Github organization. For this, you can create a user verification command. You can see an example script in contrib that verifies that a given access token belongs to a user in a specific organization.  In order for this script to work, I have to request <a href="https://developer.github.com/v3/oauth/#scopes">the “user” scope from github</a>.</p>

<h1 id="notes">Notes</h1>

<p>This was my first time using Go, but I found it fairly simple to figure out what was going on.  The <code>go fmt</code> command is pretty amazing, especially for a Go beginner with no idea about Go style.  I would like to eventually improve the login screen since it’s just a small button in the corner that says “login”, pretty boring.  There are probably a lot of improvements to be made (better support for other oauth providers?) so please send a pull request!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[10 Things I Learned Deploying Graphite]]></title>
    <link href="http://kevinmccarthy.org//blog/2013/07/18/10-things-i-learned-deploying-graphite/"/>
    <updated>2013-07-18T17:04:00-10:00</updated>
    <id>http://kevinmccarthy.org//blog/2013/07/18/10-things-i-learned-deploying-graphite</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#deploying-graphite-is-a-pain-in-the-ass">1. Deploying Graphite is a pain in the ass</a></li>
  <li><a href="#graphite-is-more-powerful-than-munin">2. Graphite is more powerful than Munin</a></li>
  <li><a href="#there-must-be-50-ways-to-feed-your-graphite">3. There must be 50 ways to feed your Graphite</a></li>
  <li><a href="#make-sure-that-your-statsd-flush-interval-is-at-least-as-long-as-your-graphite-interval">4. Make sure that your StatsD flush interval is at least as long as your Graphite interval</a></li>
  <li><a href="#turning-off-legacy-namespacing">5. Turning off legacy namespacing</a></li>
  <li><a href="#the-difference-between-yourstatcount-and-yourstatrate">6. The difference between yourstat.count and yourstat.rate</a></li>
  <li><a href="#setting-up-retention">7. Setting up retention</a></li>
  <li><a href="#aggregating-data-what">8. Aggregating data: What??</a></li>
  <li><a href="#hitcount-vs-summarize">9. hitcount() vs summarize()</a></li>
  <li><a href="#holy-crap-there-are-a-lot-of-graphite-dashboards">10. Holy crap there are a lot of Graphite Dashboards</a></li>
  <li><a href="#updates-and-errata">Updates and errata</a></li>
</ul>

<p>Graphite and I have a long history.  It all started when reading <a href="http://codeascraft.com/2011/02/15/measure-anything-measure-everything/">the amazing blog post introducing StatsD by Etsy’s engineering team</a>.  If you haven’t read it yet, I recommend it as it is a nice illustration of why you would want to install Graphite.  If you’ve read it already, you probably have been meaning to get Graphite going but haven’t gotten around to it.</p>

<p><img class="center" src="/images/graphite/powerplant.jpg" title="Admit it, you wish you worked here" ></p>

<p>Basically, what Graphite does is makes you feel like the badass engineer working on a huge project, intimately familiar with the inner workings of <em>everything</em>.  Why should nuclear engineers be the only ones with awesome control panels?</p>

<p>Here is what Graphite looks like:</p>

<p><img src="/images/graphite/graphite.png" title="Almost as cool" ></p>

<p>Having quick access to all these statistics helps you be more productive.  But there is quite a bit of work go get off the ground.  That brings me to item #1:</p>

<h1 id="deploying-graphite-is-a-pain-in-the-ass">1. Deploying Graphite is a pain in the ass</h1>

<p>Graphite is such a strange beast.  It was developed at Orbitz (maybe to track how many airlines still give out free peanuts?) and is open-sourced under the Apache license.  It is written in Python and is actually made up of 3 main parts:</p>

<ol>
  <li>Graphite-web: A Django project that provides a GUI for graphite.  This is what you see when you visit a Graphite install in your browser.  It also has an admin area that lets you set up users that are allowed to create and save graphs.  You can deploy this like any other Django app via wsgi.</li>
  <li>Carbon: Carbon is a daemon that runs constantly in the background.  Its main job is to take in statistics from the network and write them to disk.  It also does something both complicated and fascinating called “aggregation” which I will explore later.  </li>
  <li>Whisper: Whisper is a time-series database file format.  It doesn’t actually run as a server or anything, it’s just a standard format for storing time-series data.  These databases are a fixed size, and once the data gets old it falls off the other end.  Whisper is a replacement for RRDTool, which I will talk about later. Whisper will also be replaced eventually by its successor, <a href="https://github.com/graphite-project/ceres">Ceres</a></li>
</ol>

<p>I have tried and failed a few times getting Graphite into a state where it could be deployed automatically, and I usually gave up going “wow this tool is hard to deploy, and Munin is good enough anyway” so I kept giving up.  </p>

<h2 id="why-is-deploying-graphite-a-pain-in-the-ass">Why is deploying Graphite a pain in the ass?</h2>

<p>I think the main reason is that <em>django is a pain in the ass to deploy</em>. After noodling around with this for awhile, I figured out a pretty good way to deploy Graphite, and have made <a href="https://github.com/kevin1024/graphite-puppet">a puppet module</a> for installing Graphite on a RHEL6 or Centos6 server.</p>

<p>The reason this works so well is that the EPEL repository (if you use Centos or RHEL you pretty much <em>have</em> to install EPEL) has, awesomely, packaged Graphite.  It’s actually in 3 packages: <code>python-whisper</code>, <code>python-carbon</code>, and <code>graphite-web</code>.  The packages make a few assumptions, and after a bit of trial-and-error I was able to figure out what they were expecting.</p>

<ul>
  <li>Graphite and Carbon get installed in the system site-packages directory (/usr/lib/python2.6/site-packages/)</li>
  <li>Graphite and Carbon expect their config files to end up in /etc/</li>
  <li>You have to run <code>manage.py syncdb</code> after configuring the database in /etc/.  This database is just used for a few things on the front-end, not actual graph data, so you don’t have to worry too much about using a real database.  I just used sqlite.</li>
  <li>Apache will be configured to serve Graphite on port 80</li>
</ul>

<p>You will probably also want to add some HTTP basic auth so creepers don’t start creeping your graphs.  The puppet module will do that for you.</p>

<h1 id="graphite-is-more-powerful-than-munin">2. Graphite is more powerful than Munin</h1>

<p>In the beginning, there was <a href="http://oss.oetiker.ch/rrdtool/">RRDtool</a>.  Chances are, you have seen and/or are currently staring at an RRDTool graph right now. </p>

<p><img class="center" src="/images/graphite/rrdtool.png" title="Look familiar?" > </p>

<p>For years, I’ve been using a project called <a href="http://munin-monitoring.org/">Munin</a>.  Munin is by far one of my favorite tools.  It is beautiful in its simplicity.  Each of your servers that you are monitoring runs a process called <code>munin-node</code>, and on your main graph server, you run a cron job that connects to all these servers and requests data about them periodically.  Then it writes this info out into an RRDTool database and generates a graph, as well as an HTML file pointing to all the graphs it has generated.</p>

<p>The <code>munin-node</code> daemon that runs on all your servers is incredibly lightweight, the network protocol is easy to debug, and writing plugins is a joy.  However, the graphs that are generated are just static images.</p>

<p>Graphite lets you manipulate your graphs in ways I never dreamed of when I  was using Munin.  You can run functions on your graphs to change the time scale, summarize the data, and mash together several graphs into a frankengraph <em>at will</em>.</p>

<h1 id="there-must-be-50-ways-to-feed-your-graphite">3. There must be 50 ways to feed your Graphite</h1>

<p>Once you manage to get Graphite running, there are a lot of great ways to get more data into it.  Feeding more and more of data into Graphite became a bit of an obsession for me.</p>

<h2 id="statsd">statsd</h2>
<p>StatsD is the big daddy that started it all, and it works great.  It’s written in nodejs, so you’ll need that running on your server.  The key thing that StatsD is doing is listening to UDP packets (see the “Why UDP” section in the <a href="http://codeascraft.com/2011/02/15/measure-anything-measure-everything/">Etsy blog post</a> for more on this) and batching them up before sending the statistics into Graphite.  I use it to send all my application-level statistics.  </p>

<p>Also, for some reason there are a zillion client libraries for StatsD. For Python, I like <a href="https://github.com/jsocol/pystatsd">this one</a> (<code>pip install statsd</code>)</p>

<h2 id="collectd">collectd</h2>
<p>Collectd is a daemon that runs on each of your servers and reports back info to Graphite.  It comes with a bunch of plugins and <a href="http://collectd.org/wiki/index.php/Table_of_Plugins">there are a zillion more for specialized servers</a> that help you track more statistics.  Collectd is in EPEL, but it’s a pretty old version.</p>

<p>Newer versions of Collectd can connect directly to Graphite.  The version I found in EPEL is a bit old so I used bucky to connect them together</p>

<h2 id="bucky">bucky</h2>
<p>Bucky is a Python daemon that listens for both StatsD <em>and</em> collectd packets, and sends them to Graphite.  So it’s a replacement for StatsD but it also knows how to use Collectd metrics.  It is pretty great and easy to deploy.  It’s also on the EPEL repository, so it’s only a <code>yum install</code> away on Centos/RHEL.</p>

<h2 id="logster">logster</h2>
<p>Etsy also has this <a href="https://github.com/etsy/logster">logster</a> project which is a Python script that can tail your log files and generate metrics to send back to Graphite.  I haven’t actually tried it but it looks interesting.  They don’t seem to have many <a href="https://github.com/etsy/logster/tree/master/logster/parsers">parsers</a> though so I think you’ll have to implement some of your own.  <a href="http://logstash.net/">Logstash</a> can also send to Graphite.</p>

<p>There are <a href="https://graphite.readthedocs.org/en/latest/tools.html">many more</a> ways to feed Graphite in the docs.</p>

<h1 id="make-sure-that-your-statsd-flush-interval-is-at-least-as-long-as-your-graphite-interval">4. Make sure that your StatsD flush interval is at least as long as your Graphite interval</h1>

<p>This is probably the most important lesson I learned.</p>

<p>What the heck is a StatsD flush interval?  Remember how I said that StatsD batches up sending statistics to Graphite?  Well, you can configure how often StatsD sends those batches.  By default the flush interval is 10 seconds.  So every 10 seconds, StatsD is sends a batch of metrics to Graphite.</p>

<p>What happens if you start sending stats faster than Graphite’s highest resolution?  Graphite will start dropping metrics.</p>

<p>Perhaps you’re tracking clicks on a button that says “Kevin is Awesome”.  This is a very tempting button, so people click it about 5 times a second.</p>

<p>StatsD starts batching things: 10 seconds of people mashing the button means that each batch will have 50 clicks in it.</p>

<p>For this example, let’s say that Graphite’s interval is set to a minute.  That means that during that minute, we will have sent 6 batches of 50 clicks for a total of 300 clicks.  However, Graphite will only record one of those batches, so it will only record 50 clicks instead of 100.</p>

<p>To make this concept a little easier to understand, here is a little
Processing sketch I whipped that simulates the process.  Events are
generated at <code>Event Generation Rate</code>.  Those show up in the bottom box.
They are also sent into StatsD as they happen.  Next, events are flushed
from StatsD into the Graphite Buffer at <code>StatsD Flush Rate</code>.  Finally,
events are written from the Graphite buffer to disk at the <code>Graphite
Storage Interval</code>.  Feel free to play around with the number to see how
they affect the count.  If your <code>StatsD Flush Rate</code> is smaller than the <code>Graphite Storage Interval</code>, you can see how stats start to get lost.  Let it run for awhile and see how the number of events that make it into Graphite (top box) is much lower than the amount that actually happened (bottom box)</p>

<p><script src="http://cloud.github.com/downloads/processing-js/processing-js/processing-1.4.1.min.js" type="text/javascript"></script>

<style>
.animation_controls {
  display: block;
  float: left;
  text-align: left;
  width: 206px;
  margin-left: 10px;
  margin-top: 10px;
  font-size: .75em;
  font-family: sans-serif;
  border: 1px solid black;
  border-radius: 10px;
  padding: 5px;
  line-height: 1.5em;
}
.animation_controls ul {
  list-style-type: none;
  padding: 0;
  margin: 0;
}

</style>

<div id="animation"></div>
<div class="animation_controls">
  <ul>
  <li>Event Generation Rate: <input id="eventRate" value="100"></input> per second</li>
  <li>StatsD Flush Rate: <input id="statsdFlushRate" value="10"> seconds</input></li>
  <li>Graphite Storage Interval: <input id="graphiteStorageInterval" value="10"> seconds</input></li>
  </ul>
  <button id="update">update</button>
  <button id="reset">reset</button>
</div>
<div style="clear:both"></div>

<script id="mysketch" type="application/processing">
int graphiteCount = 0;
int graphiteTempCount = 0;
int statsdCount = 0;
int actualEventCount = 0;
int i = 0;

void setup() {
  size(400,400);
  frameRate(1);
}

void drawGraphiteBuffer() {
  fill(#0000FF);
  rect(width/3 * 2, 0, width/3 , height/3);
  fill(#000000);
  text("Graphite Buffer", width/3*2 + 10, 20);
  textSize(24);
  text( graphiteTempCount, width - width/6 - textWidth(str(graphiteTempCount))/2, height/6 + 12);
}

void drawArrows() {
  fill(#dddddd);
  triangle(width/2 - 20, height/3 * 2, width / 2 + 20, height/3 * 2, width/2, height/ 3 * 2 - 20);
  triangle(width - width/6 - 20, height/3, width - width/6 + 20, height/3, width - width/6, height/3 - 20);
  triangle(width/3*2, height/6 + 20, width/3*2, height/6 - 20, width/3*2 - 20, height/6); 
}
void statBox(color color1, color color2, int yoffset, String label, int value) {
  fill(color1);
  rect(0, yoffset, width, height/3);
  fill(color2);
  textSize(24);
  text(value, width/2 - textWidth(str(value))/2, yoffset + (height/3)/2 + 12);
  textSize(12);
  text(label, 10, 20 + yoffset);
  fill(#cccccc);
}


void flushStatsd() {
  graphiteTempCount = statsdCount;
  statsdCount = 0;
}

void writeGraphiteCount() {
  graphiteCount += graphiteTempCount;
  graphiteTempCount = 0;
}

void draw() {

  if (i > 0 && i % statsdFlushRate == 0) {
    statBox(#00FF00, 000000, (height/3), "Statsd (FLUSHING)", statsdCount);
    flushStatsd();
  }
  else {
    statBox(#FFFFFF, 000000, (height/3), "Statsd", statsdCount);
  }
  
  if (i>0 && i % graphiteStorageInterval == 0) {
    statBox(#00FF00, #000000, 0, "Graphite (WRITING FROM BUFFER TO DISK)", graphiteCount);
    writeGraphiteCount();
  }
  else {
     statBox(#000000, #FFFFFF, 0, "Graphite (on disk)", graphiteCount);
  }
    
  statBox(#000000, #FFFFFF, (height/3)*2, "Actual Event Count", actualEventCount);
  drawGraphiteBuffer();
  drawArrows();
  
  statsdCount += eventRate;
  actualEventCount += eventRate;

  i++;
}

</script>

<script type="text/javascript">
var statsdFlushRate = 10;
var graphiteStorageInterval = 10;
var eventRate = 100;

$(document).ready(function() {
    var init = function() {
        $('#animation').html('<canvas id="mycanvas" width="400" height="400" style="float:left"></canvas>');
        var c = document.getElementById("mycanvas");
        var s = document.getElementById("mysketch").text;
        console.log(c);
        console.log(s);
        p = new Processing(c, s);
    }

    $('#update').click(function(event) {
        eventRate = parseInt($('#eventRate').val());
        graphiteStorageInterval = parseInt($('#graphiteStorageInterval').val());
        statsdFlushRate = parseInt($('#statsdFlushRate').val()); 
    });
    $('#reset').click(function() {
       init();
    });
    init();
});
</script>
</p>

<h1 id="turning-off-legacy-namespacing">5. Turning off legacy namespacing</h1>

<p>Once you start exploring the data sent into Graphite, you’ll probably notice that your counter values are stored twice.  Depending on your version of graphite and whether you have turned off something called <code>legacyNamespace</code>, they will either be in a folder called “stats_counts” as well as in the “stats” folder, or they will be the “stats/counters” folder.</p>

<p>I think it makes more sense to have all the statsd metrics contained in the “statsd” folder.  In order to do this, you have to set the <code>legacyNamespace</code> configuration option to false (it defaults to true).</p>

<p>For the rest of this article, I’ll assume that you have turned off legacy namespacing and refer to the counter values with their non-legacy names.</p>

<p>But why are there two versions of the same counter stats, each with different values?  That brings us to the next lesson I learned:</p>

<h1 id="the-difference-between-yourstatcount-and-yourstatrate">6. The difference between yourstat.count and yourstat.rate</h1>

<p>In StatsD, counters keep track of events that happen, as opposed to gauges, which keep track of a value that fluctuates.  There are really two interesting things about counts that we might want to graph.  </p>

<ul>
  <li>How many times did this thing happen?</li>
  <li>At what rate is this thing happening?</li>
</ul>

<p>Yourstat.count keeps the total number of times that this event happened,
and Yourstat.rate keeps the rate that this thing happens <em>per second</em>.</p>

<p>Since Yourstat.count is actually keeping track of the number of times
that a thing happened, it can also be thought of as a rate, but instead
of happening <em>per second</em>, it’s happening <em>per (your graphite storage
interval</em>. This is because the number of times something happens is
flushed to disk every time the Graphite storage interval happens.</p>

<p>Ah, but how do you configure the storage interval?  Glad you asked!</p>

<h1 id="setting-up-retention">7. Setting up retention</h1>

<p>Graphite lets you be <em>insanely</em> specific about how long you want data
kept around.  You can decide to keep one metric at per-second resolution
for a year, and another metric at per-day resolution for a month.  You
can even keep a metric at high resolution for a few days, and then
reduce the resolution as it ages.  Lower resolutions require less space
on disk.</p>

<p>Retention is configured in a file called <code>storage-schemas.conf</code>.
You can read more about it here in <a href="http://graphite.readthedocs.org/en/latest/config-carbon.html#storage-schemas-conf">the official
documentation</a> but here is an example:</p>

<p><code>
[nginx_requests]
pattern = nginx\.requests\.count$
retentions = 1s:7d,1m:30d,15m:5y
</code></p>

<p>This rule is named nginx_requests and matches all stats with the pattern
<code>nginx\.requests\.count$</code>.  It will keep 1 second resolution for 7 days,
1 minute resolution for 30 days, after that, and 15 minute resolution
for 5 years after that.</p>

<p>It’s also interesting that the data files that store this information
have a fixed size after creation.  This is good since they won’t explode
and fill up your disk while you’re on vacation.  However, that means
that if you ever want to change the retention of your metrics after
you’ve started collecting them, you wil need to resize the databases on
disk manually.  There is a command called <code>whisper-resize.py</code> that can
do this.</p>

<h1 id="aggregating-data-what">8. Aggregating data: What??</h1>

<p>Here’s something potentially confusing that falls out of letting you
define your retention rates with such complicated schemes:  You have to
drop your resolution when you transition from higher resolution to lower
resolution.  This means throwing away data.  This process is called
<em>aggregation</em>.</p>

<p>Normally, this works fine and you don’t even care about it.   However,
there are a couple subtle situations that can trip you up.</p>

<p>If you have a rate metric, which keeps track of, for example, the number
of times somebody signed up on your website per second, and you want to
convert it to the number of times <em>per minute</em>, you can just take the
rate from each of the 60 seconds in a minute and average it.  This is
the default method.  However, what happens if you have a bunch of <code>null</code>
values in your graph for that minute?  Let’s say your network was
malfunctioning for 59 seconds, so you didn’t record any event, and in
the last second, you record 100 signups.  Is it fair to say that you
were getting an average of 100 signups the whole time?  Probably not.
But if you only lost 1 second of data, you might be a lot more
comfortable with that average.  By default, you need at least 50% of the
data to be non-null to store this average value.  This is configurable
by changing a setting called <code>xFilesFactor</code>, which is pretty much my favorite variable name ever.  Why?  No reason.</p>

<p><img class="left" src="/images/graphite/xfiles.jpg"></p>

<p>The other thing that can trip you up is aggregating <em>counts</em>.  What
happens when we average 60 seconds of counts?  Well, we lose around
1/60th of the events that happened.  So for count statistics, we
actually want to <em>sum</em> the number of times that something happened.  You
can set this with the <code>aggregationMethod</code> in <code>storage-aggregation.conf</code></p>

<h1 id="hitcount-vs-summarize">9. hitcount() vs summarize()</h1>

<p>I had a bit of trouble figuring out the difference between the
<code>hitcount()</code> function and the <code>summarize()</code> function in Graphite, so
here it is:</p>

<ul>
  <li><code>hitcount()</code> is used for <em>rate</em> variables to turn them into <em>counts</em>,
as well as changing the resolution of a graph.</li>
  <li><code>summarize()</code> just changes the resolution of the graph.</li>
</ul>

<h1 id="holy-crap-there-are-a-lot-of-graphite-dashboards">10. Holy crap there are a lot of Graphite Dashboards</h1>

<p>Finally, if you would like a better-looking Graphite dashboard, there
are a lot of alternative dashboards out there.  <a href="http://graphite.readthedocs.org/en/1.0/url-api.html">Graphite has a great
API</a> and you can
just add &amp;format=json to the end of any graph image and get the JSON
data out of it.  <a href="http://dashboarddude.com/blog/2013/01/23/dashboards-for-graphite/">Here are just a few of them in a nice
summary</a></p>

<h1 id="updates-and-errata">Updates and errata</h1>

<ul>
  <li>The original version of the article stated that Collectd was unable to connect directly to Graphite.  This is incorrect, as newer versions have added this feature.</li>
  <li>I also said that Graphite requires memcached.  This is apparently incorrect (and I’m glad it doesn’t!)</li>
  <li>devicenull pointed this out on Reddit: “Graphite loves SSDs. If you put it on a normal drive you’re going to have to upgrade, so just use a SSD from the beginning.”  My stats server is running fine on an oldschool drive, but I can see how IO could start going crazy.</li>
</ul>

]]></content>
  </entry>
  
</feed>
